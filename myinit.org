#+STARTUP: overview
* interface tweaks
  #+BEGIN_SRC emacs-lisp
  ;; surpress the startup message
  (setq inhibit-startup-message t)
  ;; hide the tool bar of emacs
  (tool-bar-mode -1)
  ;; everytime ask for yes or no, just need to reply y or n
  (fset 'yes-or-no-p 'y-or-n-p)
  ;; everytime need to restart buffer because of new configeration, can just hit f5
  (global-set-key (kbd "<f5>") 'revert-buffer)
  #+END_SRC

* key binding
  key binding claims the key use for macbook
  #+BEGIN_SRC emacs-lisp
  (setq mac-option-key-is-meta nil
	mac-command-key-is-meta t
	mac-command-modifier 'meta ;; disable Option's function for non-ASCII characters
	mac-option-modifier 'none)
  #+END_SRC

* org-mode setting
  #+BEGIN_SRC emacs-lisp
  ;; word wrap in org mode, although might make table looks ugly
  (setq org-startup-truncated nil)
  ;; not preserves the indentation of the source code in the src edit buffer
  ;; set to true might be useful for python though
  (setq org-src-preserve-indentation nil)
  ;; relative indent of the source code w.r.t. beginning of #+begin_src.
  (setq org-edit-src-content-indentation 0)
  #+END_SRC

* ibuffer
  changes the bufferlist to ibuffer mode so can kill multiple buffer at one time
  #+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC

* themes
  loads the theme
  #+BEGIN_SRC emacs-lisp
  (load-theme 'deeper-blue t)
  #+END_SRC

* packages
** ace-window
   helps to jump between windows when there are multiple 
   #+BEGIN_SRC emacs-lisp
   (use-package ace-window
     :ensure t
     :init
     (progn
       (global-set-key [remap other-window] 'ace-window)
       ;; change the fontsize of the number pop up for each windows
       (custom-set-faces
	'(aw-leading-char-face
	  ((t (:inherit ace-jump-face-foreground :height 2.0)))))
	  ))
   #+END_SRC
** auto-complete
   #+BEGIN_SRC emacs-lisp
   (use-package auto-complete
     :ensure t
     :init
     (progn
       (ac-config-default)
       (global-auto-complete-mode t)
       (set-face-background 'ac-candidate-face "SlateGray1")
       (set-face-background 'ac-selection-face "RoyalBlue3")
       (add-to-list 'ac-modes 'org-mode)
       ))
   #+END_SRC
** avy
   searches for chars to navigat quickly
   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :bind ("M-s" . avy-goto-char))
   #+END_SRC
** cousel
   #+BEGIN_SRC emacs-lisp
   (use-package counsel
     :ensure t
     :config
     (setq counsel-find-file-ignore-regexp
	   (concat
	    ;; File names beginning with # or .
	    "\\(?:\\`[#.].*\\)"
	    ;; File names ending with # or ~
	    "\\|\\(?:\\`.+?[#~]\\'\\)"))
     )
   #+END_SRC
** ivy
   ivy replaces ido to autocomplete when kill buffer or find file 
   #+BEGIN_SRC emacs-lisp
   (use-package ivy
     :ensure t
     :diminish (ivy-mode)
     :bind(("C-x b" . ivy-switch-buffer))
     :config
     (progn
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       ))
    #+END_SRC
** org-bullets
   makes the list in org files looks nicer
   #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t               ;; insure that it is installed
      :config
      (add-hook 'org-mode-hook #'org-bullets-mode)) ;; from the homepage
   #+END_SRC
** swiper
   for flex searching
   #+BEGIN_SRC emacs-lisp
   (use-package swiper
     :ensure t
     :bind (("C-s" . swiper)     ;; now the default search will be swiper
	    ("C-r" . swiper)
	    ("C-c C-r" . ivy-resume)
	    ("M-x" . counsel-M-x)
	    ("C-x C-f". counsel-find-file))
     :config
     (progn
       (ivy-mode 1)
       (setq ivy-use-virtual-buffers t)
       (setq ivy-display-style 'fancy)
       (setq enable-recursive-minibuffers t)
       (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
       ))
   #+END_SRC
** try
   try helps temporily try the packages. \\
   usage: M-x try RET package-name, then M-x package-name to run it
   #+BEGIN_SRC emacs-lisp
   (use-package try
	:ensure t)
   #+END_SRC
** which-key
   helps to remind the shortcut
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
     :ensure t
     :config (which-key-mode))
   #+END_SRC
* Disabled mode or packages
** ido-mode
   #+BEGIN_SRC emacs-lisp
   ;; using swiper so ido no longer needed
   ;; set up ido mode for flex matching
   ;; (setq ido-enable-flex-matching t) ;; enable not exact match
   ;; (setq ido-everywhere t)           ;; enable ido matching everywhere
   ;; (ido-mode 1)
   #+END_SRC
